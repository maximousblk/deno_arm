name: ci

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  test:
    name: test / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
#           - target: aarch64-apple-darwin
#             os: macos-11.0
#           - target: aarch64-pc-windows-msvc
#             os: windows-latest

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          repository: "denoland/deno"
          fetch-depth: 2
          submodules: true

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --color always --target ${{ matrix.target }}

  build:
    name: build / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
#           - target: aarch64-apple-darwin
#             os: macos-11.0
#           - target: aarch64-pc-windows-msvc
#             os: windows-latest

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          repository: "denoland/deno"
          fetch-depth: 2
          submodules: true

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --locked --release --color always --target ${{ matrix.target }}

      - name: Zip
        working-directory: target/${{ matrix.target }}/release
        run: zip -r deno-${{ matrix.target }}.zip deno

      - name: Upload Builds
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: target/${{ matrix.target }}/release/deno-${{ matrix.target }}.zip

  release:
    needs: build
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Download Builds
        uses: actions/download-artifact@v2

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: "test"
          name: "Test Release"
          prerelease: false
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          body: "Test Release"
          token: ${{ secrets.GITHUB_TOKEN }}
